import sys
import os
import re
from math import log
import numpy as np
import scipy as sp
from PIL import Image
import matplotlib.pyplot as plt

# ダンプしたバイナリ列の変換関数
def adjustHex(f,hex_r):
    array = []
    frac = 0   # 端数格納用変数
    for line in f:
        ss=line.split()
        xx = [x for x in ss if hex_r.fullmatch(x)]
        if len(xx) == 0:    # 要素0の行を除外
            break
        elif len(xx) < 16:  # 長さが16以下のlistを端数として保存
            frac = len(xx)
            break
        elif len(xx) > 16:  # 残ったstringを除外
            xx = xx[0:16]
        array.append([int(i,16) for i in xx]) # xxを16進数変換
    return np.array(array), frac

# ファイルサイズに応じた画像幅の調整関数
def decideImageWidth(size_KB):
    width_list = (32,64,128,256,384,512,768,1024,2048)

    if size_KB <= 10:
        return width_list[0]
    elif size_KB > 10 and size_KB <= 30:
        return width_list[1]
    elif size_KB > 30 and size_KB <= 60:
        return width_list[2]
    elif size_KB > 60 and size_KB <= 100:
        return width_list[3]
    elif size_KB > 100 and size_KB <= 200:
        return width_list[4]
    elif size_KB > 200 and size_KB <= 500:
        return width_list[5]
    elif size_KB > 500 and size_KB <= 1000:
        return width_list[6]
    elif size_KB > 1000 and size_KB <= 2000:
        return width_list[7]
    elif size_KB >2000:
        return width_list[8]

# 画像化+png画像として保存
def convertAndSave(filepath,array,frac,name):
    imageWidth = decideImageWidth(array.size/1024.0)
    imageLength = array.size // imageWidth
    array = array.ravel() # arrayの平坦化
    array = array[:imageLength*imageWidth].reshape((imageLength,imageWidth))
    im = Image.fromarray(np.uint8(array))
    im.save(filepath+'/'+name+'.png', "PNG")
    print("{}+{}  {:.1f}KB".format(array.shape,frac,(array.size+frac)/1024.0))
    return im

# This program is assuming use of txtfiles that is made by "grayscale.sh".
# The architecture of textfiles are below.(hexdump -vC binarypath)
# address, hexvalue*2*16, strings
# 00000000  4d 5a 90 00 03 00 00 00  04 00 00 00 ff ff 00 00  |MZ..............|
# 00000010  b8 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  |........@.......|
# 00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|

# Get the list of files
filepath = input("filepath>>")
files = os.listdir(filepath)
#print("files:{}".format(files))
hex_r = re.compile('\w{2}') # [0-9a-z][0-9a-z]
txt_cnt = 0

for cnt, name in enumerate(files):
    # Image only text files
    if '.txt' != name[-4:]:
        continue
    with open(filepath+'/'+name) as f:
        array, frac = adjustHex(f,hex_r)

    print("[{}]{}".format(txt_cnt,filepath+'/'+name))
    plt.imshow(convertAndSave(filepath,array,frac,name))

    del array
    txt_cnt += 1
